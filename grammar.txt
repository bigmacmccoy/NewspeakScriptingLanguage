/* description: Parses end evaluates mathematical expressions. */

      /* lexical grammar */
      %lex
      %%
      \s+                   {/* skip whitespace */}
      [0-9]+("."[0-9]+)?\b  {return 'NUMBER';}
      "*"                   {return '*';}
      "/"                   {return '/';}
      "-"                   {return '-';}
      "+"                   {return '+';}
      "("                   {return '(';}
      ")"                   {return ')';}
     “un”                   {return ‘!’}    
     “verify”               {return “if”}
     “equal”                {return “=”}
     “goodthink”            {return “//”}
     “dayorder”             {return “function”}
     “upsub”                {return “return”}
     “report”               {return “console.log”}
     <<EOL>>                {return “;”}
      <<EOF>>               {return 'EOF';}

      /lex

      /* operator associations and precedence */

      %left '+' '-'
      %left '*' '/'

      %start expressions

      %% /* language grammar */

      expressions
          : e EOF
              {return $1;}
          ;

      e
          : e '+' e
              {$$ = $1 + $3;}
          | e '-' e
              {$$ = $1 - $3;}
          | e '*' e
              {$$ = $1 * $3;}
          | e '/' e
              {$$ = $1 / $3;}
          | '(' e ')'
              {$$ = $2;}
          | NUMBER
              {$$ = Number(yytext);
// We have basically no idea what we are doing from this point onwards...
          | ‘un’(e)
              {$$ = !$2;}
          | ‘report’(e)
              {$$ = console.log($2);}
          | ‘upsub’(e)
              {$$ = return($2); }
          | ‘dayorder’ e (e)
              {$$ = function $2 ($3)}
          | ‘verify’(e == e)
              {$$ = $1 == $3}
          |    ‘verify’(e != e)
              {$$ = $1 != $3}
          | ‘verify’(e < e)
              {$$ = $1 < $3} 
          | ‘verify’(e > e)
              {$$ = $1 > $3}          
          | ‘verify’(e <= e)
              {$$ = $1 <= $3}     
          | ‘verify’(e >= e)
              {$$ = $1 >= $3}  
          | ‘goodthink’ e
              {$$ = //$1}
          ;